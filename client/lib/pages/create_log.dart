import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../model/post.module.dart'; // Corrected path to LogModel
import '../model/user.module.dart';
import '../state/auth.state.dart';
import '../state/log.state.dart'; // Assuming LogState is here

class CreateLogPage extends StatefulWidget {
  const CreateLogPage({super.key});

  @override
  State<CreateLogPage> createState() => _CreateLogPageState();
}

class _CreateLogPageState extends State<CreateLogPage> {
  final _formKey = GlobalKey<FormState>();
  String? _notes;
  double _intensityRating = 3.0; // Default to 3 out of 5
  int? _durationMinutes;
  String? _location;
  bool _wasPartnerInvolved = false;

  // TODO: Add TextEditingControllers for text fields if needed for more complex logic

  void _submitLog() async { // Made async for potential await on save
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      final authState = Provider.of<AuthState>(context, listen: false);
      final UserModel? currentUser = authState.userModel;

      if (currentUser == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Error: User not logged in!')),
        );
        return;
      }

      // Create LogModel instance
      final newLog = LogModel(
        // key: will likely be generated by Firebase or LogState on save
        notes: _notes,
        createdAt: DateTime.now().toUtc().toIso8601String(),
        user: currentUser,
        intensity_rating: _intensityRating.round(),
        duration_minutes: _durationMinutes,
        location: _location,
        was_partner_involved: _wasPartnerInvolved,
        // custom_tags: null, // Or handle if you have a UI for it
      );

      try {
        // Call LogState to save the log to Firebase
        // Assuming LogState has a method like `addLog`
        await Provider.of<LogState>(context, listen: false).addLog(newLog);

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Log saved successfully!')),
        );
        // Navigate back
        if (mounted) Navigator.of(context).pop();
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving log: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create New Log'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: <Widget>[
              TextFormField(
                decoration: const InputDecoration(labelText: 'Notes'),
                maxLines: 3,
                onSaved: (value) => _notes = value,
              ),
              const SizedBox(height: 16),
              Text('Intensity Rating: ${_intensityRating.round()}/5'),
              Slider(
                value: _intensityRating,
                min: 1,
                max: 5,
                divisions: 4,
                label: _intensityRating.round().toString(),
                onChanged: (double value) {
                  setState(() {
                    _intensityRating = value;
                  });
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(labelText: 'Duration (minutes)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value != null && value.isNotEmpty) {
                    final n = int.tryParse(value);
                    if (n == null) {
                      return 'Please enter a valid number';
                    }
                    if (n <= 0) {
                      return 'Duration must be positive';
                    }
                  }
                  return null;
                },
                onSaved: (value) => _durationMinutes = value != null && value.isNotEmpty ? int.parse(value) : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(labelText: 'Location (e.g., Home, Bed)'),
                onSaved: (value) => _location = value,
              ),
              const SizedBox(height: 16),
              SwitchListTile(
                title: const Text('Was a partner involved?'),
                value: _wasPartnerInvolved,
                onChanged: (bool value) {
                  setState(() {
                    _wasPartnerInvolved = value;
                  });
                },
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _submitLog,
                child: const Text('Save Log'),
              ),
            ],
          ),
        ),
      ),
    );
  }
} 